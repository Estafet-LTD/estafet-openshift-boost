@NonCPS
def getProjects(json) {
	def items = new groovy.json.JsonSlurper().parseText(json).items
	def projects = []
	for (int i = 0; i < items.size(); i++) {
		projects << items[i]['metadata']['name']
	}
	return projects.sort()
}

def getNextProjectName(product) {
	sh "oc get projects -l type=${product}-dq -o json > projects.json"
	def json = readFile('projects.json')	
	def projects = getProjects(json)
	if (projects.isEmpty()) {
		return "${product}-dq00"
	} else {
		def matcher = projects.last() =~ /(.*)(dq)(\d+\d+)/
		def env = "${matcher[0][3].toInteger()+1}"
		return "${product}-${matcher[0][2]}${env.padLeft(2, '0')}"	
	}
}

node("jenkins-slave-ansible") {
	
	def project
	
	properties([
	  parameters([
	     string(name: 'PROJECT_TITLE'), 
	     string(name: 'PRODUCT'),
	     string(name: 'USER_ID'),
	     string(name: 'USER_NAME'),
		 string(name: 'OPENSHIFT_HOST_PORT'),
		 string(name: 'REPO'),
	  ])
	])
	
	stage ("connect as admin") {
		withCredentials([usernamePassword(credentialsId: 'cluster_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			sh "oc login --insecure-skip-tls-verify=true -u ${USERNAME} -p ${PASSWORD} ${params.OPENSHIFT_HOST_PORT}"
    	}
	}
	
	stage ("create the namespace") {
		project = getNextProjectName(params.PRODUCT)
		def title = params.PROJECT_TITLE.equals("") ? project : params.PROJECT_TITLE
		sh "oc new-project $project --display-name='${title}'"
		
		sh "oc label namespace $project type=${params.PRODUCT}-dq product=${params.PRODUCT} userId=${params.USER_ID}"
		sh "oc policy add-role-to-user edit system:serviceaccount:${params.PRODUCT}-cicd:jenkins -n $project"
		sh "oc policy add-role-to-user edit ${params.USER_NAME} -n $project"
	}

	stage("checkout") {
		git credentialsId: "git", branch: "master", url: params.REPO
	}

	stage("retrieve the version") {
		def yml = readYaml file: "src/boost/openshift/definitions/product.yml"
		version = yml.boost.version
	}

	stage ("install boost core") {
		sh "mkdir -p src/boost/openshift/playbooks"
		sh "wget https://raw.githubusercontent.com/boostcd/boostcd/${boost.version}/src/boost/openshift/playbooks/install.yml -q -P src/boost/openshift/playbooks"
		sh "ansible-playbook -i src/boost/openshift/playbooks/hosts.ini src/boost/openshift/playbooks/install.yml"
	}		
		
	stage ("build the environment") {
		withCredentials([file(credentialsId: 'ansible_vault', variable: 'vault')]) {
			sh "ansible-playbook -i src/boost/openshift/playbooks/hosts.ini --vault-password-file ${vault} src/boost/openshift/playbooks/install_developer_environment.yml -e env_project=${project}"
    	}
	}		

}
