---
- name: Preparing the ansible roles for openshift boost 
  hosts: local   
  tasks:

    - name: load the variables
      include_vars:
        dir: ../definitions
        extensions: [yml]  
   
    - name: define the default boost repo value
      set_fact:
        boostcd:
          repo: https://github.com/boostcd/boostcd.git

    - name: merge the default boost repo value
      set_fact:
        boost: "{{boost|combine(boostcd,recursive=True)}}"
      when: boost.repo is undefined

    - set_fact: 
        workdir: "{{ ansible_env.HOME }}/.boost"

    - name: Create Workdir
      file:
        path: "{{ workdir }}"
        state: directory
        
    - name: Checkout the boost console dependencies from github
      git:
        repo: "{{ boost.repo }}"
        dest: "{{ workdir }}/boostcd"
        version: "{{ boost.version }}"
        update: yes
      tags:
        - git  

    - name: Updating boost playbooks and inventory
      synchronize:
        src: "{{ workdir }}/boostcd/src/boost/openshift/playbooks"
        dest: "{{ playbook_dir }}/.."
        recursive: yes
        delete: yes

    - name: Updating boost system roles
      synchronize:
        src: "{{ workdir }}/boostcd/src/boost/openshift/roles"
        dest: "~/.ansible"    
        recursive: yes
        delete: no

    - name: Updating boost extensions
      synchronize:
        src: "{{ workdir }}/boostcd/src/boost/openshift/extensions/"
        dest: "~/.ansible/roles/"    
        recursive: yes
        delete: no        

    - name: Check that the product extensions exist
      stat:
        path: "{{ playbook_dir }}/../extensions"
      register: product_roles

    - name: Updating product extensions
      synchronize:
        src: "{{ playbook_dir }}/../extensions/"
        dest: "~/.ansible/roles"
        recursive: yes
        delete: no
      when: product_roles.stat.exists and product_roles.stat.isdir

    - name: Install jmespath
      shell: "pip install --user jmespath"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - jmespath 

    - name: Install lxml
      shell: "pip install --user lxml"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - jmespath 

    - debug:
        var: boost
        verbosity: 0
