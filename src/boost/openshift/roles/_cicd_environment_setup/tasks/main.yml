---
- name: create the cicd project for {{ cicd_project }}
  include_role: 
    name: _namespace_setup
  vars:
    project: "{{ cicd_project }}"
    project_description: "CI/CD: {{ product.description }}"

- name: create the roles for {{ cicd_project }}
  include_role: 
    name: _namespace_role_setup
  vars:
    project: "{{ cicd_project }}"
    role: edit

- name: jenkins setup
  include_role: 
    name: _jenkins_setup
  vars:
    project: "{{ cicd_project }}"
    volume_capacity: 30Gi
    memory_limit: 3Gi

- name: environments setup
  set_fact: 
    preprod: "{{ environments.stages | get_preprod }}"

- name: set_fact when for preprod
  set_fact: 
    preprod_project: "{{ product.name }}-{{ item.name }}"
  with_items: "{{ environments.stages }}"
  when: item.name == preprod

- name: Create build, release and promotion pipelines for each of the microservices
  shell: "oc process -f {{ templates }}/microservice-pipelines.yml -p BOOST_URL={{ boostcd.repo }} -p VERSION={{ boost.version }} -p MICROSERVICE_NAME={{ item.name }} -p MICROSERVICE_REPO_URI={{ item.repo }} -p PRODUCT={{ product.name }} -p ENVIRONMENTS_REPO_URI={{ product.repo }} -p TEST_PIPELINE={{ item.test }} -p PREPROD_PROJECT={{ preprod_project }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift       

- name: define mid stages
  set_fact: 
    mid_stages: "{{ environments.stages | get_mid_stages }}"

- name: Create promote pipelines for each microservice for each environment
  shell: "oc process -f {{ templates }}/promote.yml -p BOOST_URL={{ boostcd.repo }} -p VERSION={{ boost.version }} -p MICROSERVICE_NAME={{ item[0].name }} -p MICROSERVICE_REPO_URI={{ item[0].repo }} -p PRODUCT={{ product.name }} -p ENVIRONMENTS_REPO_URI={{ product.repo }} -p ENV={{ item[1].name }} -p PROJECT={{ product.name }}-{{ item[1].name | next_stage(environments.stages) }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item[1].name in mid_stages
  with_nested: 
    - "{{ microservices }}"
    - "{{ environments.stages }}"
  tags:
    - openshift   

- name: Create promote all pipelines for each environment
  shell: "oc process -f {{ templates }}/promote-all.yml -p BOOST_URL={{ boostcd.repo }} -p VERSION={{ boost.version }} -p PRODUCT={{ product.name }} -p ENV={{ item.name }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item.name in mid_stages
  with_items: "{{ environments.stages }}"
  tags:
    - openshift  

- name: Create test pipelines for the environments
  shell: "oc process -f {{ templates }}/test.yml -p BOOST_URL={{ boostcd.repo }} -p SMOTE_TEST_REPO_URI={{ environments.smoke_test_repo }} -p VERSION={{ boost.version }} -p PRODUCT={{ product.name }} -p ENV={{ item.name }} -p REPO_URI={{ item.test_repo }} -p PRODUCT_REPO_URI={{ product.repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item.test_repo is defined  
  with_items: "{{ environments.stages }}"
  tags:
    - openshift  

- name: Create promotion all to prod pipeline
  shell: "oc process -f {{ templates }}/promote-all-to-prod.yml -p BOOST_URL={{ boostcd.repo }} -p VERSION={{ boost.version }} -p PRODUCT={{ product.name }} -p ENV={{ item.name }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  when: item.name == preprod
  with_items: "{{ environments.stages }}"
  tags:
    - openshift 

- name: Create build and release pipelines for the libraries
  shell: "oc process -f {{ templates }}/library-pipelines.yml -p BUILD_PIPELINE={{ item.build }} -p RELEASE_PIPELINE={{ item.release }} -p LIBRARY_NAME={{ item.name }} -p LIBRARY_REPO_URI={{ item.repo }} -p PRODUCT={{ product.name }} -p ENVIRONMENTS_REPO_URI={{ product.repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ libraries | default([]) }}"
  tags:
    - openshift  

- name: Create general pipelines 
  shell: "oc process -f {{ templates }}/pipelines.yml -p BOOST_URL={{ boostcd.repo }} -p VERSION={{ boost.version }} -p MASTER_HOST={{ openshift_host_port }} -p ADMIN_USER={{ openshift.username }} -p ADMIN_PASSWORD={{ openshift.password }} -p PRODUCT={{ product.name }} -p REPO_URI={{ product.repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  tags:
    - openshift      

- name: script approval
  include_role: 
    name: _jenkins_script_approval
  vars:
    project: "{{ cicd_project }}"
    
- name: jenkins configuration xml
  include_role: 
    name: _jenkins_config_xml
  vars:
    project: "{{ cicd_project }}"
    
- name: jenkins credentials
  include_role: 
    name: _jenkins_credentials_xml
  vars:
    project: "{{ cicd_project }}"

- name: maven pipeline plugin
  include_role: 
    name: _jenkins_maven_pipeline_plugin
  vars:
    project: "{{ cicd_project }}"

- name: jenkins http request plugin
  include_role: 
    name: _jenkins_http_request_plugin
  vars:
    project: "{{ cicd_project }}"

- name: cucumber reports plugin
  include_role: 
    name: _jenkins_cucumber_reports_plugin
  vars:
    project: "{{ cicd_project }}"

- name: ansible agent setup
  include_role: 
    name: _jenkins_ansible_agent_setup
  vars:
    project: "{{ cicd_project }}"    

- name: restart jenkins
  include_role: 
    name: _jenkins_restart
  vars:
    project: "{{ cicd_project }}"    
    