---
# Define the name and description of the OpenShift project
- include_role: 
    name : init

- set_fact: cicd_project="{{ product }}-cicd"

- include_role: 
    name: namespace-setup
  vars:
    project: "{{ cicd_project }}"
    project_description: "CI/CD: {{ product_description }}"

- include_role: 
    name: namespace-role-setup
  vars:
    project: "{{ cicd_project }}"
    role: edit

- include_role: 
    name: jenkins-setup
  vars:
    project: "{{ cicd_project }}"
    volume_capacity: 30Gi
    memory_limit: 3Gi

- name: Read the broker pod list
  shell: "oc get bc -o json"
  register: pipelines_json     

- name: Parse the list of pipelines into a variable
  set_fact: list_of_piplines="{{pipelines_json.stdout|from_json|json_query('[*]')}}"

- debug:
    var: list_of_piplines
    verbosity: 0

- name: Delete the all pipelines
  shell: "oc delete bc/{{ item.meta.name }} -n {{ cicd_project }} || true"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ list_of_pipelines | default([]) }}"
  tags:
    - openshift 

- name: set_fact when for preprod
  set_fact: preprod_project="{{ product }}-{{ item.name }}"
  with_items: "{{ environments.stages }}"
  when: "item.next == 'prod'"  
    
- name: Create build, release and promotion pipelines for each of the microservices
  shell: "oc process -f {{ templates }}/microservice-pipelines.yml -p GITHUB={{ github }} -p MICROSERVICE_NAME={{ item.name }} -p MICROSERVICE_REPO_URI={{ item.repo }} -p PRODUCT={{ product}} -p ENVIRONMENTS_REPO_URI={{ environments.repo }} -p BUILD_PIPELINE={{ item.build }} -p RELEASE_PIPELINE={{ item.release }} -p PROMOTE_PIPELINE={{ item.promote }} -p PROMOTE_TO_PROD_PIPELINE={{ item.promote_to_prod }} -p PREPROD_PROJECT={{ preprod_project }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift       

- name: Create promote pipelines for each microservice for each environment
  shell: "oc process -f {{ templates }}/promote.yml -p GITHUB={{ github }} -p MICROSERVICE_NAME={{ item[0].name }} -p MICROSERVICE_REPO_URI={{ item[0].repo }} -p PRODUCT={{ product}} -p ENVIRONMENTS_REPO_URI={{ environments.repo }} -p PROMOTE_PIPELINE={{ item[0].promote }} -p ENV={{ item[1].name }} -p PROJECT={{ product }}-{{ item[1].next }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item[1].name != 'build' and item[1].name != 'prod' and item[1].next != 'end' 
  with_nested: 
    - "{{ microservices }}"
    - "{{ environments.stages }}"
  tags:
    - openshift  

- name: Create promote all pipelines for each environment
  shell: "oc process -f {{ templates }}/promote-all.yml -p GITHUB={{ github }} -p PRODUCT={{ product }} -p ENV={{ item.name }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item.name != 'build' and item.name != 'prod' and item.next != 'end' 
  with_items: "{{ environments.stages }}"
  tags:
    - openshift  

- name: Create test pipelines for the environments
  shell: "oc process -f {{ templates }}/test.yml -p GITHUB={{ github }} -p PRODUCT={{ product }} -p ENV={{ item.name }} -p REPO_URI={{ item.test_repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: item.test_repo is defined  
  with_items: "{{ environments.stages }}"
  tags:
    - openshift  

- name: Create promotion to prod pipeline
  shell: "oc process -f {{ templates }}/promote-to-prod.yml -p GITHUB={{ github }} -p PRODUCT={{ product }} -p ENV={{ item.name }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  when: item.next == 'prod'
  with_items: "{{ environments.stages }}"
  tags:
    - openshift 

- name: Create build and release pipelines for the libraries
  shell: "oc process -f {{ templates }}/library-pipelines.yml -p GITHUB={{ github }} -p LIBRARY_NAME={{ item.name }} -p LIBRARY_REPO_URI={{ item.repo }} -p PRODUCT={{ product }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ libraries }}"
  tags:
    - openshift  

- name: Create general pipelines 
  shell: "oc process -f {{ templates }}/pipelines.yml -p GITHUB={{ github }} -p MASTER_HOST={{ openshift }} -p ADMIN_USER={{ username }} -p ADMIN_PASSWORD={{ password }} -p PRODUCT={{ product }} -p REPO_URI={{ repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  tags:
    - openshift      
    