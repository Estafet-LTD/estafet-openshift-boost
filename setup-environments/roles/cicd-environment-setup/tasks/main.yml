---
# Define the name and description of the OpenShift project
- include_role: 
    name : init

- set_fact: cicd_project="{{ product }}-cicd"

- include_role: 
    name: namespace-setup
  vars:
    project: "{{ cicd_project }}"
    project_description: "CI/CD: {{ product_description }}"
    cloud_environment: true

- include_role: 
    name: namespace-role-setup
  vars:
    project: "{{ cicd_project }}"
    role: edit

- include_role: 
    name: jenkins-setup
  vars:
    project: "{{ cicd_project }}"
    volume_capacity: 30Gi
    memory_limit: 3Gi

- name: Delete the build pipelines
  shell: "oc delete bc/build-{{ item.name }}"
  ignore_errors: yes
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift 

- name: Delete the release pipelines
  shell: "oc delete bc/release-{{ item.name }}"
  ignore_errors: yes
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift 

- name: Delete the promotion to prod pipelines
  shell: "oc delete bc/promote-to-prod-{{ item.name }}"
  ignore_errors: yes
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift 
    
- name: Create build, release and promotion pipelines for each of the microservices
  shell: "oc process -f {{ templates }}/microservice-pipelines.yml -p GITHUB={{ github }} -p MICROSERVICE_NAME={{ item.name }} -p MICROSERVICE_REPO_URI={{ item.repo }} -p PRODUCT={{ product}} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ microservices }}"
  tags:
    - openshift       

- name: Create build and release pipelines for the libraries
  shell: "oc process -f {{ templates }}/library-pipelines.yml -p GITHUB={{ github }} -p LIBRARY_NAME={{ item.name }} -p LIBRARY_REPO_URI={{ item.repo }} -p PRODUCT={{ product }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  with_items: "{{ libraries }}"
  tags:
    - openshift  

- name: Create general pipelines 
  shell: "oc process -f {{ templates }}/pipelines.yml -p GITHUB={{ github }} -p MASTER_HOST={{ openshift }} -p ADMIN_USER={{ username }} -p ADMIN_PASSWORD={{ password }} -p PRODUCT={{ product }} -p REPO_URI={{ repo }} | oc create -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"  
  tags:
    - openshift      
    