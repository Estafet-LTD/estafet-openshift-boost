---
- debug:
    var: microservice
    verbosity: 0

- name: Checkout {{ microservice.repo }} from github tag {{ release_version }}
  git:
    repo: "https://github.com/{{ github.org }}/{{ microservice.repo }}.git"
    dest: "{{ workdir }}/{{ microservice.repo }}"
    version: "{{ release_version }}"
    update: yes
  tags:
    - git  

- name: Check that the {{ stage }}-setup.yml exists
  stat:
    path: "{{ workdir }}/{{ microservice.repo }}/openshift/setup/{{ stage }}-setup.yml"
  register: stat_result

- name: load the settings
  include_vars:
    file: "{{ workdir }}/{{ microservice.repo }}/openshift/setup/{{ stage }}-setup.yml"
  when: stat_result.stat.exists

- include_role: 
    name: "{{ item.name }}"
  vars:
    params: "{{ item }}"
  with_items: "{{ setup }}"
  when: stat_result.stat.exists

- name: Remove the deployment descriptor for the application
  shell: "oc delete dc -l app={{ microservice.name }} -n {{ project }} || true"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift  

- name: Delete the {{ microservice.name }} configmap
  shell: 'oc delete configmap {{ microservice.name }} -n {{ project }} || true'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: Delete the {{ microservice.name }} secret
  shell: 'oc delete secret {{ microservice.name }} -n {{ project }} || true'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: define the name of the config yml
  set_fact:
    config_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-config.yml"
  when: deploy_env is undefined

- name: define the name of the config yml
  set_fact:
    config_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-{{ deploy_env }}-config.yml"
  when: deploy_env is defined

- name: Check that the {{ config_yml }} exists
  stat:
    path: "{{ config_yml }}"
  register: stat_result

- name: use the default is there is no config
  set_fact:
    config_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/default-config.yml"
  when: not stat_result.stat.exists

- name: Load the variables from {{ config_yml }}
  include_vars:
    file: "{{ config_yml }}"

- name: Initialise config map variables
  set_fact: mapStr=""

- name: format the configmap variables
  set_fact: mapStr="{{ mapStr }} --from-literal={{ item.name }}='{{ item.value }}'"
  with_items: "{{ config_map }}"

- name: Create the {{ microservice.name }} configmap
  shell: 'oc create configmap {{ microservice.name }} {{ mapStr }} -n {{ project }}'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: define the name of the secret yml
  set_fact:
    secret_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-secret.yml"
  when: deploy_env is undefined

- name: define the name of the secret yml
  set_fact:
    secret_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-{{ deploy_env }}-secret.yml"
  when: deploy_env is defined

- name: Check that the {{ secret_yml }} exists
  stat:
    path: "{{ secret_yml }}"
  register: stat_result

- name: Load the variables {{ secret_yml }}
  include_vars:
    file: "{{ secret_yml }}"
  when: stat_result.stat.exists

- name: Initialise secret variables
  set_fact: secretStr=""
  when: stat_result.stat.exists

- name: format the secrets variables
  set_fact: secretStr="{{ secretStr }} --from-literal={{ item.name }}='{{ item.value }}'"
  with_items: "{{ secrets }}"
  when: stat_result.stat.exists

- name: Create the {{ microservice.name }} secrets
  shell: 'oc create secret generic {{ microservice.name }} {{ secretStr }} -n {{ project }}'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: stat_result.stat.exists
  tags:
    - openshift

- name: Check that the {{ stage }}-resources.yml exists
  stat:
    path: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-resources.yml"
  register: stat_result

- name: define the name of the resources yml
  set_fact:
    resources_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/{{ stage }}-resources.yml"
  when: stat_result.stat.exists    

- name: define the name of the resources yml
  set_fact:
    resources_yml: "{{ workdir }}/{{ microservice.repo }}/openshift/configuration/default-resources.yml"
  when: not stat_result.stat.exists

- name: Load the variables from default-resources.yml
  include_vars:
    file: "{{ resources_yml }}"

- name: Create the non prod deployment config
  shell: "oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-config.yml -p NAMESPACE={{ project }} -p DOCKER_NAMESPACE={{ project }} -p DOCKER_IMAGE_LABEL={{ release_version }} -p DOCKER_REGISTRY={{ openshift.registry }} -p PRODUCT={{ product.name }} -p MAX_MEMORY={{ resources.max_memory }} -p MIN_MEMORY={{ resources.min_memory }} -p MAX_CPU={{ resources.max_cpu }} -p MIN_CPU={{ resources.min_cpu }} -p REPLICAS={{ resources.replicas }} | oc apply -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: deploy_env is undefined
  tags:
    - openshift     

- name: Create the prod deployment config
  shell: "oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-config.yml -p ENV={{ deploy_env }}  -p NAMESPACE={{ project }} -p DOCKER_NAMESPACE={{ project }} -p DOCKER_IMAGE_LABEL={{ release_version }} -p DOCKER_REGISTRY={{ openshift.registry }} -p PRODUCT={{ product.name }} -p MAX_MEMORY={{ resources.max_memory }} -p MIN_MEMORY={{ resources.min_memory }} -p MAX_CPU={{ resources.max_cpu }} -p MIN_CPU={{ resources.min_cpu }} -p REPLICAS={{ resources.replicas }} | oc apply -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: deploy_env is defined
  tags:
    - openshift     

- name: Wait for the non prod microservice to become available {{ microservice.name }}
  shell: "oc rollout status dc/{{ microservice.name }}"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: deploy_env is undefined
  tags:
    - openshift

- name: Wait for the prod microservice to become available {{ deploy_env }}{{ microservice.name }}
  shell: "oc rollout status dc/{{ deploy_env }}{{ microservice.name }}"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  when: deploy_env is defined
  tags:
    - openshift

- name: Expose Service {{ microservice.name }}
  shell: "oc expose service {{ microservice.name }}"
  when: microservice.expose and stage != 'prod'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift