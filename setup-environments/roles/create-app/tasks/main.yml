---
- set_fact: branch="master"

- debug:
    var: microservice
    verbosity: 0

- name: fetch latest tag for this repo
  shell: "git describe --abbrev=0 --tags"
  args:
    chdir: "{{ workdir }}/{{ microservice.repo }}"
  when: test
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - git  

- set_fact: branch="{{ command_result.stdout }}"
  when: test

- name: Checkout {{ microservice.repo }} from github branch {{ branch }}
  git:
    repo: "https://github.com/{{ github }}/{{ microservice.repo }}.git"
    dest: "{{ workdir }}/{{ microservice.repo }}"
    version: "{{ branch }}"
    update: yes
  tags:
    - git  

- name: Create the local database
  include_role: 
    name: create-local-db
  when: microservice.db and db_type == "local"   
  vars:
    pod: "{{ db_pod }}"
    db_name: "{{ project }}-{{ microservice.name }}"
    ddl_location: "{{ workdir }}/{{ microservice.repo }}/ddl"
    drop_ddl: "/tmp/drop-{{ microservice.name }}-db.ddl"
    drop_liquibase_ddl: "/tmp/drop-liquibase-db.ddl"

- name: Create the {{ microservice.name }} build config from {{ branch }} branch
  shell: "oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-build-config.yml -p NAMESPACE={{ project }} -p IMAGESTREAM_NAMESPACE={{ imagestream_namespace }} -p GITHUB={{ github }} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT={{ product }} -p MAVEN_MIRROR_URL={{ maven_mirror_url }} -p DOCKER_REGISTRY={{ docker_registry }} -p SOURCE_REPOSITORY_REF={{ branch }} | oc apply -f -"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift         
    
- name: Create the cloud database
  include_role: 
    name: create-cloud-db
  when: microservice.db and db_type == "cloud"    
  vars:
    db_project: "{{ project }}"

- name: Remove all aspects of the application so that we can rebuild from scratch
  shell: "oc delete all -l app={{ microservice.name }} -n {{ project }}"
  ignore_errors: yes
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift  

- name: Create the {{ microservice.name }} build config from {{ branch }} branch
  shell: 'oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-build-config.yml -p NAMESPACE={{ project }} -p IMAGESTREAM_NAMESPACE={{ imagestream_namespace }} -p GITHUB={{ github }} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT={{ product }} -p MAVEN_MIRROR_URL={{ maven_mirror_url }} -p DOCKER_REGISTRY={{ docker_registry }} -p SOURCE_REPOSITORY_REF={{ branch }} | oc apply -f -'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift             

- name: Start the {{ microservice.name }} build
  shell: 'oc start-build {{ microservice.name }} --wait -n {{ project }}'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: Create the deployment config without environment variables
  shell: 'oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-config.yml -p NAMESPACE={{ project }} -p DOCKER_NAMESPACE={{ project }} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT={{ product }} | oc apply -f -'
  when: microservice.environment_variables is undefined
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift     

- name: Initialise environment variables
  set_fact: variables=""
  when: microservice.environment_variables is defined

- name: format the environment environments
  set_fact: variables='-p {{ item.name }}="{{ item.value }}" {{ variables }}'
  with_items: "{{ microservice.environment_variables }}"

- name: Create the deployment config with environment variables
  shell: 'oc process -n {{ project }} -f {{ workdir }}/{{ microservice.repo }}/openshift/templates/{{ microservice.name }}-config.yml -p NAMESPACE={{ project }} -p DOCKER_NAMESPACE={{ project }} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT={{ product }} {{ variables }} | oc apply -f -'
  when: microservice.environment_variables is defined
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift     

- name: Wait for the microservice to become available {{ microservice.name }}
  shell: "oc rollout status dc/{{ microservice.name }}"
  when: rollout
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: Expose Service {{ microservice.name }}
  shell: "oc expose service {{ microservice.name }}"
  when: microservice.expose
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift