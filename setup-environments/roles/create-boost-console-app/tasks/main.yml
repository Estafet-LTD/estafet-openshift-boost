---
- set_fact: service_envs="-e JAEGER_SAMPLER_TYPE=const -e JAEGER_SAMPLER_PARAM=1 -e JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger-agent.{{ project }}.svc:5778 -e JAEGER_AGENT_HOST=jaeger-agent.{{ project }}.svc"
- set_fact: microservice_exists=true

- name: Check if microservice ({{ microservice }}) exists
  shell: 'oc get dc {{ microservice }}'
  register: command_result
  ignore_errors: true

- name: set flag for deployment
  set_fact: microservice_exists=false
  when: "'NotFound' in command_result.stderr"
  
- name: Deploy the microservice for ({{ microservice }})
  shell: "oc new-app redhat-openjdk18-openshift:1.4~https://github.com/{{ github }}/{{ repo }}.git --name={{ microservice }} --build-env MAVEN_MIRROR_URL='http://nexus.nexus.svc:8081/nexus/content/groups/public' -e OPENSHIFT_HOST_PORT={{ openshift }} -e OPENSHIFT_USER={{ username }} -e OPENSHIFT_PASSWORD={{ password }} {{ service_envs }} -e PRODUCT_LABEL={{ product }} -e PRODUCT_DESCRIPTION='{{ product_description }}' -l product={{ product }}"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift         

- name: Configure the resource limits for microservice ({{ microservice }})
  shell: "oc set resources dc {{ microservice }} -c={{ microservice }} --limits=cpu={{ cpu_max }},memory={{ memory_max }} --requests=cpu={{ cpu_min }},memory={{ memory_min }}"
  register: command_result
  when: "not {{ microservice_exists }}"
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: Wait for the microservice to become available ({{ microservice }})
  shell : "oc rollout status dc/{{ microservice }}"
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

- name: Expose Service ({{ microservice }})
  shell: "oc expose service {{ microservice }}"
  register: command_result
  when: "{{ expose }}"
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift

        