@NonCPS
def getPassive(json) {
	def matcher = new groovy.json.JsonSlurper().parseText(json).spec.to.name =~ /(green|blue)(.+)/
	String namespace = matcher[0][1]
	return namespace.equals("green") ? "blue" : "green" 
}

@NonCPS
def getRouteName(json) {
	return new groovy.json.JsonSlurper().parseText(json).items[0].metadata.name
}

node {

	properties([
	  parameters([
	     string(name: 'GITHUB'), 
		 string(name: 'PRODUCT'), 
		 string(name: 'PRODUCT_REPO'),
		 string(name: 'REPO'), 
		 string(name: 'ENV'), 
		 string(name: 'PROJECT'),
	  ])
	])

	def project = params.PROJECT
	def env = params.ENV

	stage("checkout") {
		git branch: "master", url: "https://github.com/${params.GITHUB}/${params.PRODUCT_REPO}"
	}

	stage("reset test flags for ${project}") {
		sh "oc label namespace ${project} test-passed=false --overwrite=true"	
	}

	if (env != 'prod' && env != 'test') {
		stage("execute the smoke tests") {
			def yml = readYaml file: "setup-environments/vars/environments-vars.yml"
			def testRepo =  yml.environments.smoke_test_repo	  	
			sh "oc start-build qa-${env}-smoke-test -e GITHUB=${params.GITHUB} -e PRODUCT=${params.PRODUCT} -e REPO=${testRepo} -e PROJECT=${project} --wait -n ${params.PRODUCT}-cicd"
		}
	}

	stage("execute tests") {
		if (env == 'prod') {
			sh "oc get routes -l product=${product} -o json -n ${project} > routeList.json"
			def routeList = readFile('routeList.json')
			def routeName = getRouteName(routeList)
			sh "oc get route ${routeName} -o json -n ${project} > route.json"
			def route = readFile('route.json')
			def bluegreen = getPassive(route)
			println "the stage environment is $bluegreen"
			sh "oc start-build qa-prod-impl -e GITHUB=${params.GITHUB} -e PRODUCT=${params.PRODUCT} -e REPO=${params.REPO} -e PROJECT=${project} -e ENV=${bluegreen} --wait -n ${params.PRODUCT}-cicd"
		} else {
			sh "oc start-build qa-${env}-impl -e GITHUB=${params.GITHUB} -e PRODUCT=${params.PRODUCT} -e REPO=${params.REPO} -e PROJECT=${project} --wait -n ${params.PRODUCT}-cicd"
		}
	}
	
	stage("flag this environment") {
		if (currentBuild.currentResult == 'SUCCESS') {
			println "The tests passed successfully"
			sh "oc label namespace ${project} test-passed=true --overwrite=true"	
		}
	}
	
}

