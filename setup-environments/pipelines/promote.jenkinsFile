@NonCPS
def getVersions(json) {
	def tags = new groovy.json.JsonSlurper().parseText(json).status.tags
	def versions = []
	for (int i = 0; i < tags.size(); i++) {
		versions << tags[i]['tag'].replaceAll("\\-SNAPSHOT","")
	}
	return versions
}

@NonCPS
def next(json) {
	return new groovy.json.JsonSlurper().parseText(json).metadata.labels.next
}

@NonCPS
def recentVersion(List versions) {
	versions.sort( false ) { a, b ->
		[a,b]*.tokenize('.')*.collect { it as int }.with { u, v ->
			[u,v].transpose().findResult{ x,y-> x<=>y ?: null } ?: u.size() <=> v.size()
		}
	}[-1]
}

@NonCPS
def getTestStatus(json) {
	return new groovy.json.JsonSlurper().parseText(json).metadata.labels."test-passed"
}

def testStatus(project) {
	sh "oc get project ${project} -o json > test.json"
	def test = readFile('test.json')
	return getTestStatus(test)
}

def nextProject(project) {
	sh "oc get project ${project} -o json > namespace.json"
	def namespace = readFile('namespace.json')
	return next(namespace)
}

def getValue(name, configs) {
	def returnValue
	configs.each { config ->
		if (name.equals(config.name)) {
			returnValue = config.value
		}
	}
	return returnValue
}

def getLatestVersion(product, microservice) {
	sh "oc get is ${microservice} -o json -n ${product} > image.json"
	def image = readFile('image.json')
	def versions = getVersions(image)
	if (versions.size() == 0) {
		error("There are no images for ${microservice}")
	}
	return "${recentVersion(versions)}"
}

node("jenkins-slave-ansible") {

	properties([
	  parameters([
	     string(name: 'GITHUB'), 
		 string(name: 'PRODUCT'), 
		 string(name: 'PRODUCT_REPO'), 
		 string(name: 'REPO'), 
		 string(name: 'MICROSERVICE'), 
		 string(name: 'PROJECT'),
	  ])
	])

	def prevProject = params.PROJECT
	def project
	def product = params.PRODUCT
	def microservice = params.MICROSERVICE	
	def label

	String version

	stage("determine which image is to be deployed") {
		version = getLatestVersion prevProject, microservice
		println "latest version is $version"
	}

	stage("checkout release version") {
		withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			checkout scm: [	$class: 'GitSCM', 
						   	userRemoteConfigs: [[url: "https://${USERNAME}:${PASSWORD}@github.com/${params.GITHUB}/${params.REPO}"]], 
							branches: [[name: "refs/tags/${version}"]]], changelog: false, poll: false
		}
	}

	stage ("determine the status of the ${prevProject} environment") {
		testStatus = testStatus prevProject
		println "the ${prevProject} environment test status is $testStatus"
		if (testStatus.equals("false")) error("Cannot promote microservices to ${project} as they have not passed ${prevProject} testing")
	}

	stage("determine the environment to promote to") {
		project = nextProject prevProject
		label = project.substring(product.length()+1)
		println "the promotion project is ${project}"
		println "the label ${label}"
	}

	stage("promote the image from ${prevProject} to ${project}") {
		openshiftTag namespace: prevProject, srcStream: microservice, srcTag: version, destinationNamespace: project, destinationStream: microservice, destinationTag: version
		sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${product}\"}}}' -n ${project}"
	}

	stage("reset test flags for ${project}") {
		sh "oc label namespace ${project} test-passed=false --overwrite=true"	
	}

	stage("deploy ${microservice} to ${project}") {
		openshiftBuild namespace: "${params.PRODUCT}-cicd", buildConfig: "deploy", env : [ [ name : 'PROJECT', value : project ], [ name : 'GITHUB', value : params.GITHUB ], [ name : 'PRODUCT', value : params.PRODUCT ], [ name : 'PRODUCT_REPO', value : params.PRODUCT_REPO ], [ name : 'MICROSERVICE', value : microservice ], [ name : 'VERSION', value : version ] ], waitTime: "900000"
		openshiftVerifyBuild namespace: "${params.PRODUCT}-cicd", buildConfig: "deploy", waitTime: "900000" 
	}
	
}