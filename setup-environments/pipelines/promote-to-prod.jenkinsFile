@NonCPS
def getPassive(json) {
	def matcher = new groovy.json.JsonSlurper().parseText(json).spec.to.name =~ /(green|blue)(.+)/
	String namespace = matcher[0][1]
	return namespace.equals("green") ? "blue" : "green" 
}

@NonCPS
def getRouteName(json) {
	return new groovy.json.JsonSlurper().parseText(json).items[0].metadata.name
}

@NonCPS
def getVersions(json) {
	def tags = new groovy.json.JsonSlurper().parseText(json).status.tags
	def versions = []
	for (int i = 0; i < tags.size(); i++) {
		versions << tags[i]['tag']
	}
	return versions
}

@NonCPS
def recentVersion(List versions) {
	versions.sort( false ) { a, b ->
		[a,b]*.tokenize('.')*.collect { it as int }.with { u, v ->
			[u,v].transpose().findResult{ x,y-> x<=>y ?: null } ?: u.size() <=> v.size()
		}
	}[-1]
}

@NonCPS
def getTestStatus(json) {
	return new groovy.json.JsonSlurper().parseText(json).metadata.labels."test-passed"
}

def getValue(name, configs) {
	def returnValue
	configs.each { config ->
		if (name.equals(config.name)) {
			returnValue = config.value
		}
	}
	return returnValue
}

def testStatus(project) {
	sh "oc get project ${project} -o json > test.json"
	def test = readFile('test.json')
	return getTestStatus(test)
}

def getLatestVersion(project, microservice) {
	sh "oc get is ${microservice} -o json -n ${project} > image.json"
	def image = readFile('image.json')
	def versions = getVersions(image)
	if (versions.size() == 0) {
		error("There are no images for ${microservice}")
	}
	return recentVersion(versions)
}

node() {

	properties([
	  parameters([
	     string(name: 'GITHUB'), 
		 string(name: 'PRODUCT'), 
		 string(name: 'PRODUCT_REPO'), 
		 string(name: 'REPO'), 
		 string(name: 'MICROSERVICE'), 
		 string(name: 'PROJECT'),
	  ])
	])
	
	def prevProject = params.PROJECT
	def project = "${params.PRODUCT}-prod"
	def microservice = params.MICROSERVICE
	def product = params.PRODUCT
	def version
	def env
	def pipelines

	stage("determine the environment to deploy to") {
		sh "oc get routes -l product=${product} -o json -n ${project} > routeList.json"
		def routeList = readFile('routeList.json')
		def routeName = getRouteName(routeList)
		sh "oc get route ${routeName} -o json -n ${project} > route.json"
		def route = readFile('route.json')
		env = getPassive(route)
		println "the target environment is $env"
	}
	
	stage ("determine the status of the ${params.PROJECT} environment") {
		testStatus = testStatus prevProject
		println "the ${prevProject} environment test status is $testStatus"
		if (testStatus.equals("false")) error("Cannot promote $env microservices to staging as they have not passed ${params.PROJECT} testing")
	}		
	
	stage("determine which image is to be deployed") {
		version = getLatestVersion prevProject, microservice
		println "latest version is $version"
	}

	stage("promote the image from ${prevProject} to ${project}") {
		sh "oc tag ${prevProject}/${microservice}:${version} ${project}/${microservice}:${version}"
		sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${product}\"}}}' -n ${project}"
	}

	stage("checkout release version") {
		withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			checkout scm: [	$class: 'GitSCM', 
						   	userRemoteConfigs: [[url: "https://${USERNAME}:${PASSWORD}@github.com/${params.GITHUB}/${params.REPO}"]], 
							branches: [[name: "refs/tags/${version}"]]], changelog: false, poll: false
		}
	}
	
	stage("reset test flag for ${project}") {
		sh "oc label namespace ${project} test-passed=false --overwrite=true"	
	}	

	stage("promote the image from ${params.PROJECT} to ${project}") {
		sh "oc tag ${params.PROJECT}/${microservice}:${version} ${project}/${microservice}:${version}"
		sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${params.PRODUCT}\"}}}' -n ${project}"
	}	

	stage("deploy ${microservice} to ${project}") {
		sh "oc start-build deploy -e PROJECT=${project} -e GITHUB=${params.GITHUB} -e PRODUCT=${params.PRODUCT} -e PRODUCT_REPO=${params.PRODUCT_REPO} -e MICROSERVICE=${microservice} -e VERSION=${version} -e ENV=${env} --wait -n ${params.PRODUCT}-cicd"
	}
	
}