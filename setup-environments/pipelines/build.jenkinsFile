@NonCPS
def getVersion(pom) {
	def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
	return "${matcher[0][1]}${matcher[0][2].toInteger()}-SNAPSHOT"
}

def getValue(name, configs) {
	def returnValue
	configs.each { config ->
		if (name.equals(config.name)) {
			returnValue = config.value
		}
	}
	return returnValue
}

node("jenkins-slave-ansible") {

	properties([
	  parameters([
	     string(name: 'GITHUB'), 
		 string(name: 'PRODUCT'), 
		 string(name: 'PRODUCT_REPO'), 
		 string(name: 'REPO'), 
		 string(name: 'MICROSERVICE'),
	  ])
	])

	def project = "${params.PRODUCT}-build"
	def microservice = params.MICROSERVICE	
	def version

	stage("checkout ${params.PRODUCT_REPO}") {
		git branch: "master", url: "https://github.com/${params.GITHUB}/${params.PRODUCT_REPO}"
	}

	stage("checkout ${params.REPO}") {
		checkout scm: [$class: 'GitSCM', 
				userRemoteConfigs: [[url: "https://github.com/${params.GITHUB}/${params.REPO}"]], 
				extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '~/.boost']],
      			branches: [[name: '*/master']]], changelog: false, poll: false
	}

	stage("reset the promoted image stream") {
		def pom = readFile('pom.xml')
		version = getVersion(pom)
		sh "oc tag -d ${microservice}:${version} -n ${params.PRODUCT}-cicd || true"
	}	

	stage ("install boost") {
		sh "ansible-playbook -i setup-environments/hosts.ini setup-environments/update.yml"
	}		
	
	stage ("build the microservice") {
		withCredentials([file(credentialsId: 'ansible_vault', variable: 'vault')]) {
			sh "ansible-playbook -i setup-environments/hosts.ini --vault-password-file ${vault} setup-environments/build-microservice.yml -e env_project=${project}"
    	}
	}	

	stage("read the pipeline definition") {
		pipelines = readYaml file: "openshift/pipelines/pipelines.yml"
	}

	stage("remove the deployment, configuration map and secrets") {
		sh "oc delete dc ${microservice} -n ${project} || true"	
		sh "oc delete configmap ${microservice} -n ${project} || true"
		sh "oc delete secret ${microservice} -n ${project} || true"	
	}

	stage("create the configuration map") {
		def yml = readYaml file: "openshift/configuration/build-config.yml"
		def configMap = yml.config_map
		def mapStr = ""
		configMap.each { config ->
			mapStr = "${mapStr} --from-literal=${config.name}=${config.value}"
		}
		sh "oc create configmap ${microservice} ${mapStr} -n ${project}"
	}

	if (fileExists("openshift/configuration/build-secret.yml")) {
		stage("create the secrets") {
			def yml = readYaml file: "openshift/configuration/build-secret.yml"
			def secrets = yml.secrets
			def mapStr = ""
			secrets.each { secret ->
				mapStr = "${mapStr} --from-literal=${secret.name}=${secret.value}"
			}
			sh "oc create secret generic ${microservice} ${mapStr} -n ${project}"
		}
	}

	if (pipelines.build.restart != null) {
		stage("restart ${pipelines.build.restart}") {
			def service = pipelines.build.restart
			openshiftDeploy namespace: project, depCfg: service
			openshiftVerifyDeployment namespace: project, depCfg: service, replicaCount:"1", verifyReplicaCount: "true", waitTime: "300000"    	
		}		
	}

	if (pipelines.build.wiremock) {
		stage("update wiremock") {
			def files = findFiles(glob: 'src/integration-test/resources/*.json')
			files.each { file -> 
				def json = readFile(file.path)
				def response = httpRequest contentType: "APPLICATION_FORM", url: "http://wiremock-docker.${project}.svc:8080/__admin/mappings/new", httpMode: "POST", validResponseCodes: "201", requestBody: json
			}
		}		
	}

	if (pipelines.build.tests) {
		stage("unit tests") {
			withMaven(mavenSettingsConfig: 'maven') {
		     sh "mvn clean test"
		  } 
		}		
	}
	
	if (pipelines.build.db) {
		stage("prepare the database") {
			withCredentials([usernamePassword(credentialsId: 'couchbase', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
				def yml = readYaml file: "openshift/configuration/build-secret.yml"
				def saslPassword = getValue "COUCHBASE_PASSWORD", yml.secrets
				httpRequest authentication: "couchbase", url: "http://couchbase.${params.PRODUCT}-build.svc:8091/pools/default/buckets/${project}-${microservice}", httpMode: "DELETE", validResponseCodes: '200:404'
				def body = "-d name=${project}-${microservice} -d ramQuotaMB=100 -d authType=sasl -d bucketType=couchbase -d saslPassword=${saslPassword}"
				sh "curl -X POST -u ${USERNAME}:${PASSWORD} http://couchbase.${params.PRODUCT}-build.svc:8091/pools/default/buckets ${body}"				
			}
		}		
	}
	
	stage("create build config") {
			sh "oc process -n ${project} -f openshift/templates/${microservice}-build-config.yml -p NAMESPACE=${project} -p GITHUB=${params.GITHUB} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT=${params.PRODUCT} | oc apply -f -"
	}

	stage("execute build") {
		openshiftBuild namespace: project, buildConfig: microservice
		openshiftVerifyBuild namespace: project, buildConfig: microservice, waitTime: "300000" 
	}

	stage("read the resource definition") {
		if (fileExists("openshift/configuration/build-resources.yml")) {
			def yml = readYaml file: "openshift/configuration/build-resources.yml"
			resources = yml.resources
		} else {
			def yml = readYaml file: "openshift/configuration/default-resources.yml"
			resources = yml.resources
		}
	}

	stage("execute deployment") {
		sh "oc process -n ${project} -f openshift/templates/${microservice}-config.yml -p NAMESPACE=${project} -p DOCKER_NAMESPACE=${project} -p DOCKER_IMAGE_LABEL=latest -p PRODUCT=${params.PRODUCT} -p MAX_MEMORY=${resources.max_memory} -p MIN_MEMORY=${resources.min_memory} -p MAX_CPU=${resources.max_cpu} -p MIN_CPU=${resources.min_cpu} -p REPLICAS=${resources.replicas} | oc apply -f -"
		openshiftVerifyDeployment namespace: project, depCfg: microservice, replicaCount:"1", verifyReplicaCount: "true", waitTime: "300000" 
	}

	if (pipelines.build.tests) {
		stage("execute the container tests") {
			withMaven(mavenSettingsConfig: 'maven') {
				sh "mvn clean verify -P integration-test"
			}    		
		}		
	}
	
	if (pipelines.build.promote) {
		stage("promote the image to cicd") {
			openshiftTag namespace: project, srcStream: microservice, srcTag: "latest", destinationNamespace: "${params.PRODUCT}-cicd", destinationStream: microservice, destinationTag: version
			sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${params.PRODUCT}\"}}}' -n ${params.PRODUCT}-cicd"
		}		
	}

}