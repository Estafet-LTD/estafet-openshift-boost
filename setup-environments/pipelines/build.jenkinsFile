@NonCPS
def getVersion(pom) {
	def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
	return "${matcher[0][1]}${matcher[0][2].toInteger()}-SNAPSHOT"
}

node("jenkins-slave-ansible") {

	properties([
	  parameters([ 
	    string(name: 'GITHUB'), 
		string(name: 'PRODUCT'), 
		string(name: 'PRODUCT_REPO'), 
		string(name: 'REPO'), 
		string(name: 'MICROSERVICE'),
	  ])
	])

	def project = "${params.PRODUCT}-build"
	def microservice = params.MICROSERVICE	
	def version

	stage("checkout ${params.REPO}") {
		git credentialsId: "git", url: "https://github.com/${params.GITHUB}/${params.REPO}"
	}

	stage("reset the promoted image stream") {
		if (fileExists("pom.xml")) {
			def pom = readFile("pom.xml")
			version = getVersion(pom)
		} else {
			def properties = readProperties  file: ".boost/application.properties"
			version = properties['version']
		}
		sh "oc tag -d ${microservice}:${version} -n ${params.PRODUCT}-cicd || true"
	}

	stage("checkout ${params.PRODUCT_REPO}") {
		git credentialsId: "git", url: "https://github.com/${params.GITHUB}/${params.PRODUCT_REPO}"
	}

	stage ("install boost") {
		sh "ansible-playbook -i setup-environments/hosts.ini setup-environments/install.yml"
	}		

	stage ("build the microservice") {
		withCredentials([file(credentialsId: 'ansible_vault', variable: 'vault')]) {
			sh "ansible-playbook -i setup-environments/hosts.ini --vault-password-file ${vault} setup-environments/build-microservice.yml -e env_project=${project} -e target_app=${microservice}"
    	}
	}	

	stage("promote the image to cicd") {
		sh "oc tag ${project}/${microservice}:latest ${params.PRODUCT}-cicd/${microservice}:${version}"
		sh "oc patch is/${microservice} -p '{\"metadata\":{\"labels\":{\"product\":\"${params.PRODUCT}\"}}}' -n ${params.PRODUCT}-cicd"
	}	

	stage("execute build test") {
		sh "oc start-build test-${microservice} -e GITHUB=${params.GITHUB} -e PRODUCT=${params.PRODUCT} -e REPO=${params.REPO} -e MICROSERVICE=${microservice} --wait -n ${params.PRODUCT}-cicd"
	}

}