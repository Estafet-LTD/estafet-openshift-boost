def updateProperties(version) {
	properties['version'] = version
	def contents = ""
	properties.each { key, value ->
       	contents += "$key=$value\n"
    }
	writeFile file: '.boost/application.properties', text: contents	
}

node {

	properties([
	  parameters([
	     string(name: 'GITHUB'), string(name: 'REPO'), string(name: 'MICROSERVICE'), string(name: 'DOCKERHUB'),
	  ])
	])

	def project = "boost-test"
	def microservice = params.MICROSERVICE
	def developmentVersion
	def releaseVersion
	def properties

	stage("checkout") {
		withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			git branch: "master", url: "https://${USERNAME}:${PASSWORD}@github.com/${params.GITHUB}/${params.REPO}"			
		}
	}

	stage("increment version") {
		properties = readProperties  file: '.boost/application.properties'
		def matcher = properties['version'] =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
		developmentVersion = "${matcher[0][1]}${matcher[0][2].toInteger()+1}-SNAPSHOT".toString()
		releaseVersion = "${matcher[0][1]}${matcher[0][2]}"
	}

	stage("perform release") {
		sh "git config --global user.email \"jenkins@estafet.com\""
		sh "git config --global user.name \"jenkins\""
		updateProperties developmentVersion
		sh "git add .boost/application.properties"
		sh "git commit -m \"boost update version ${developmentVersion}\""
		sh "git push origin master"		
		sh "git checkout -B master origin/master"		
		updateProperties releaseVersion
		sh "git add .boost/application.properties"
		sh "git commit -m \"boost release version ${releaseVersion}\""
		sh "git tag ${releaseVersion}"
		sh "git push origin ${releaseVersion}"
	}	

}

