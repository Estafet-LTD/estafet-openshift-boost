@NonCPS
def getDockerImageRepo(json) {
	return new groovy.json.JsonSlurper().parseText(json).status.dockerImageRepository
}

def getImageRepo(project, microservice) {
	sh "oc get is ${microservice} -o json -n ${project} > image.json"
	def image = readFile('image.json')
	return getDockerImageRepo(image)
}

node('maven') {

	properties([
	  parameters([
	     string(name: 'GITHUB'), string(name: 'REPO'), string(name: 'MICROSERVICE'), string(name: 'DOCKERHUB'),
	  ])
	])

	def project = "boost-test"
	def microservice = params.MICROSERVICE
	def developmentVersion
	def releaseVersion
	def dockerhub = params.DOCKERHUB

	stage("checkout") {
		withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			git branch: "master", url: "https://${USERNAME}:${PASSWORD}@github.com/${params.GITHUB}/${params.REPO}"			
		}
	}

	stage("increment version") {
		def pom = readFile('pom.xml');
		def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
		developmentVersion = "${matcher[0][1]}${matcher[0][2].toInteger()+1}-SNAPSHOT"
		releaseVersion = "${matcher[0][1]}${matcher[0][2]}"
	}

	stage("perform release") {
		sh "git config --global user.email \"jenkins@estafet.com\""
		sh "git config --global user.name \"jenkins\""
		withMaven(mavenSettingsConfig: 'maven') {
			sh "mvn release:clean release:prepare release:perform -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${developmentVersion} -Darguments=\"-Dmaven.javadoc.skip=true\" -DpushChanges=false -DlocalCheckout=true -DpreparationGoals=initialize -B"
			sh "git push origin master"
			sh "git tag ${releaseVersion}"
			sh "git push origin ${releaseVersion}"
		} 
	}	

/*
	stage("publish the image") {
		sh "oc image mirror ${getImageRepo(project, microservice)}:latest docker.io/${dockerhub}/${microservice}:${releaseVersion}"
	}	
*/
}

