@NonCPS
def getDockerImageRepo(json) {
	return new groovy.json.JsonSlurper().parseText(json).status.dockerImageRepository
}

def getImageRepo(project, microservice) {
	sh "oc get is ${microservice} -o json -n ${project} > image.json"
	def image = readFile('image.json')
	return getDockerImageRepo(image)
}

node('jenkins-slave-image-mgmt') { 

	properties([
	  parameters([
	     string(name: 'DOCKERHUB'), 
		 string(name: 'VERSION'), 
		 string(name: 'MICROSERVICE'),
		 string(name: 'OPENSHIFT_HOST_PORT'),
	  ])
	])

	def project = "boost-test"
	def microservice = params.MICROSERVICE
	def releaseVersion = params.VERSION
	def dockerhub = params.DOCKERHUB

	stage("publish the image") {
		withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DH_USERNAME', passwordVariable: 'DH_PASSWORD')]) {
			withCredentials([usernamePassword(credentialsId: 'cluster_admin', usernameVariable: 'CA_USERNAME', passwordVariable: 'CA_PASSWORD')]) {
				sh "oc login --insecure-skip-tls-verify=true -u ${CA_USERNAME} -p ${CA_PASSWORD} ${params.OPENSHIFT_HOST_PORT}"
				sh "oc whoami -t > token.data"
				def token = readFile('token.data')
				sh "skopeo copy --src-creds=${CA_USERNAME}:${token} --dest-creds=${DH_USERNAME}:${DH_PASSWORD} --src-tls-verify=false docker://${getImageRepo(project, microservice)}:latest docker://docker.io/${dockerhub}/${microservice}:${releaseVersion}"
			}
		}
	}

}

